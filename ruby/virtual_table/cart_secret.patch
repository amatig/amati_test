diff --git a/ruby/virtual_table/libs/card.rb b/ruby/virtual_table/libs/card.rb
index 8d4f2e7..158609d 100644
--- a/ruby/virtual_table/libs/card.rb
+++ b/ruby/virtual_table/libs/card.rb
@@ -1,19 +1,20 @@
 require "libs/vobject"
 
 class Card < VObject
-  attr_reader :deck, :seed, :num
+  attr_reader :deck, :seed, :num, :code
   
-  def initialize(deck, s, n)
+  def initialize(deck, code)
     super()
-    @oid = "#{deck}_#{s}_#{n}" # server un indice unico
+    @oid = "#{deck}_#{code}" # server un indice unico
+    @code = code
     @deck = deck
-    @seed = s
-    @num = n
+    @seed = nil
+    @num = nil
     @turn = false
   end
   
   def init
-    @image = Surface.load("./images/#{@deck}/#{@seed}#{@num}.png")
+    @image = Surface.load("./images/#{@deck}/deck2.png")
     @image_lock = Surface.load("./images/lock.png")
     @image_back = Surface.load("./images/#{@deck}/back1.png")
     @rect = @image.make_rect
@@ -30,8 +31,17 @@ class Card < VObject
     return [["Gira carta", "action_turn"]]
   end
   
-  def action_turn
-    @turn = (not @turn)
+  def action_turn(data=nil)
+    if @image
+      if data 
+        @seed= data[0]
+        @num = data[1]
+        @image = Surface.load("./images/#{@deck}/#{@seed}#{@num}.png")
+        @turn = (not @turn)
+      end
+    else
+      @turn = (not @turn)
+    end
   end
   
   # Ridefinizione del metodo per il deck.
diff --git a/ruby/virtual_table/libs/deck.rb b/ruby/virtual_table/libs/deck.rb
index 585ee20..778eb45 100644
--- a/ruby/virtual_table/libs/deck.rb
+++ b/ruby/virtual_table/libs/deck.rb
@@ -1,6 +1,23 @@
 require "libs/vobject"
 require "libs/card"
 
+class ServerDeck
+  def initialize(deck)
+    @secret_cards = {}
+    @public_deck = deck
+  end
+  
+  def add_card(seed, value)
+    code = (0...10).collect { rand(10) }.join
+    @public_deck.add_card(code)
+    @secret_cards[code] = [ seed, value ]
+  end
+  
+  def get_codes(code)
+    @secret_cards[code]
+  end
+end
+
 class Deck < VObject
   
   def initialize(name)
@@ -76,6 +93,10 @@ class Deck < VObject
     create
   end
   
+  def add_card(code)
+    @cards << [@name, code ]
+  end
+
   # Ridefinizione del metodo per il deck.
   def draw(screen)
     unless @cards.empty?
@@ -93,42 +114,41 @@ class DeckPoker < Deck
   def initialize(size = 54)
     super("deck1")
     @max_size = size # salva il num di carte
-    create
   end
   
-  def create
+  def create(s_deck)
     case @max_size
     when 40
-      load_40
+      load_40(s_deck)
     when 52
-      load_52
+      load_52(s_deck)
     else
-      load_54
+      load_54(s_deck)
     end
   end
   
-  def load_40
+  def load_40(s_deck)
     @cards = []
     ["c", "q", "f", "p"].each do |s|
       (1..10).each do |n|
-        @cards << [@name, s, n]
+        s_deck.add_card(s,n)
       end
     end
   end
   
-  def load_52
+  def load_52(s_deck)
     @cards = []
     ["c", "q", "f", "p"].each do |s|
       (1..13).each do |n|
-        @cards << [@name, s, n]
+        s_deck.add_card(s,n)
       end
     end
   end
   
-  def load_54
-    load_52
-    @cards << [@name, "r", 0]
-    @cards << [@name, "b", 0]
+  def load_54(s_deck)
+    load_52(s_deck)
+    s_deck.add_card("r",0)
+    s_deck.add_card("b",0)
   end
   
 end
diff --git a/ruby/virtual_table/server.rb b/ruby/virtual_table/server.rb
index 3057ad7..0424178 100755
--- a/ruby/virtual_table/server.rb
+++ b/ruby/virtual_table/server.rb
@@ -11,7 +11,7 @@ require "libs/hand"
 $DELIM = "\r\n"
 
 class Server
-  attr_accessor :connections, :table, :objects, :hash_objects
+  attr_accessor :connections, :table, :objects, :hash_objects, :secret_deck
   
   # Costruttore della classe.
   def initialize
@@ -23,6 +23,8 @@ class Server
     @objects = [] # lista oggetti sul tavolo
     @hash_objects = {} # per accedere agli oggetti + velocemente
     deck = DeckPoker.new(54)
+    @secret_deck = ServerDeck.new(deck)
+    deck.create(@secret_deck)
     @objects << deck
     @hash_objects[deck.oid] = deck
     deck.set_data_refs(@objects, @hash_objects)
@@ -109,11 +111,16 @@ class Connection < EventMachine::Connection
         end
       when "Action"
         # azione su un oggetto
-        new_data = server.hash_objects[m.oid].send(m.args)
-        unless m.args == :action_shuffle
-          resend_without_me(str)
-        else
+        o = server.hash_objects[m.oid]
+        new_data = o.send(m.args)
+        if m.args == :action_shuffle 
           resend_all(Msg.dump(:type => "Action", :oid => m.oid, :args => m.args, :data => new_data))
+        elsif m.args == :action_turn
+          card_codes = server.secret_deck.get_codes(o.code)
+          p card_codes
+          resend_all(Msg.dump(:type => "Action", :oid => m.oid, :args => m.args, :data => card_codes))
+        else
+            resend_without_me(str)
         end
       end
     end
